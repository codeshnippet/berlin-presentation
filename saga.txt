0: Into: I prepared two short (15 min) presentations based on two talks at WebDevCon 2017.
I found inspiring, and would like to share their ideas with you. Lets start with the first one.

1: Presentation will (traditionally) be divided into 3 parts: What? Why? and How?
Lets start with 'What'? And the answer is, good code.
What is good code?

2: Some resources were giving following definition, good code is: easy to understand, easy to extend, easy to maintain.
- (Understand) Code has to be simple, for others to read: colleagues, new-comers, yourself in half a year.
- (Extend) It is often possible to predict how functionality will extend and create extension points for that.
- (Maintain) Code has to be covered with tests and documented. Ideally tests will serve as documentation for the code.

3: "So what?!" you ask. "Why should we care?!"
Good code or bad code, what matters is if it brings business value, right?

4: Right! But bad code has some down sides:
- (It's expensive) takes time to understand and change, that is developers time.
- (It produces bad UX) often has lots of bugs. some of them are very twisted. Hard to find the root cause.
Bad code is poorly tests covered - that means: fixing one thing, breaks the other.
- (It causes depression) Working with good code is nice. Working with bad code is depressing.
Developers start to see nightmares.
People leave the project or even the company. And that is expensive.

5: How?
The how part. Before I give you an answer, can someone tell me 'How good is our code?'.
It turns out this question is not easy to answer.

6: One of the ways is to calculate number of WTFs/per minute during code review.

7: Another way is Sonar. When we want to talk about code quality, Sonar gives us numbers.
Sonar will show us the test coverage,
the complexity of the code we produced and
scan the code in attempt to find some issues.
I suggest you to watch a presentation from WebDevCon:
http://presentation.com
it explains how to use Sonar.

8: There couple of ways to encourage using Sonar as a part of our proces:
- Failing builds is a little harsh. We could set up an email notification for cases when a major issue was introduced in latest commit.
- We could also use some gamification and set up a board with rating of issue solvers.

9:FIN
Now, we already have Sonar in place but don't use it much. We even discussed getting rid of it.

~ 8 minutes without questions
